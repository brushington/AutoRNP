The following are the instructions and explanations for the artifact
related to the POPL 2019 submitted paper number 212:

    Efficient Automated Repair of High Floating-Point Errors in
    Numerical Libraries

In Section 5 of the submitted paper, we propose an experimental
evaluation of our approach implemented by the new tool AutoRNP:
the main goal of this artifact is to repeat this experimental
evaluation.

(Note our tool AutoRNP is available on the Github :
https://github.com/yixin-09/AutoRNP)

The `AutoRNP_aec' folder on the desktop of the VM contains the
files of the artifact.

This file is organized in the following sections:

0. DETAILS ON THE GUEST AND HOST MACHINES USED
1. STRUCTURE OF THE DIRECTORY CONTAINING THE ARTIFACT
2. RUNNING THE EXPERIMENTS ON 20 FUNCTIONS OF GSL
    2.1 RUN AutoRNP ON THE 20 FUNCTIONS
    2.2 RUN HBG ON THE 20 FUNCTIONS

--------------------------------------------------------------------------

0. DETAILS ON THE GUEST AND HOST MACHINE USED

The (guest) VM is equipped with 64-bit Ubuntu 16.04 LTS
and it is configured to use a 2 CPU and 4GB of RAM,
it uses a VDI virtual disk of size 10GB.

The username for the guest VM is "autornp";
the password is "hello".

The host computer used to produce the VM (and running it) is a
computer with an 3.5GHz(8C) Intel Core i7-3770K CPU and 16 GB
RAM, running 64-bit Ubuntu 16.04 LTS.
The host is running Oracle VirtualBox 5.2.4.
The OVA VM appliance has been obtained by using the
Open Virtualization Format version 1.0.

--------------------------------------------------------------------------

1. STRUCTURE OF THE DIRECTORY CONTAINING THE ARTIFACT

All artifact files are contained in the directory "AutoRNP_aec"
which includes two sub-directories "AutoRNP" and "HBG"

The main structure of "AutoRNP" directory is as follows:
  * AutoRNP          --> source code of our tool
  * benchmarks       --> source code of 20 GSL functions that
                         our experiments were conducted on
  * experiments      --> scripts for repeating our experiments
  * paper_data       --> original experimental results
                         presented in our paper by AutoRNP

The main structure of "HBG" directory is as follows:
  * driver_functions --> programs of the 20 GSL functions
                         and inputs for Herbgrind to test
  * Herbgrind        --> source code of the Herbgrind
                         (clone from https://github.com/uwplse/herbgrind)
  * Herbie           --> source code of the Herbie
                         (clone from https://github.com/uwplse/herbie)
  * paper_data       --> original experimental results
                         presented in our paper by HBG

--------------------------------------------------------------------------

2. RUNNING THE EXPERIMENTS ON 20 FUNCTIONS OF GSL

To avoid out of memory, experiments in 2.1 and 2.2 should not
be ran in parallel in the virtual machine

--------------------------------------------------------------------------
2.1 RUN AutoRNP ON THE 20 FUNCTIONS

Into the directory "AutoRNP_aec/AutoRNP", run the shell script:

$ ./run4GSL.sh

After a few hours (around 3 hours), experimental results will
be produced under the directory "AutoRNP_aec/AutoRNP/experiments".

Note: To complete the experiments in a shorter time, in the artifact,
we limit the number of executions of the detecting algorithm
(1 times in the artifact  while 100 times in our paper, remove
the Line 60 in file "AutoRNP_aec/AutoRNP/experiments/repair4GSL"
to reset to 100) and the number of sampling points in testing
(1000 points in the artifact while 1 million in our paper, remove
the Line 318 and Line 349 in file  "AutoRNP_aec/AutoRNP/basic_function.py"
to reset to 1 million). More than 20 hours will be needed to
complete the experiments if without those limitations.


2.1.1 Structure of experimental results:
The main structure of the experimental results is as follows:
(in "AutoRNP_aec/AutoRNP/experiments")
  * experiments/detecting_results
    - DEMC              --> includes the detecting results by
                            our DEMC algorithm.
    - Detecting results are store in "DEMC/[function_name].xls"
      for each GSL function (e.g. "DEMC/gsl_sf_airy_Ai.xls").
      In [function_name].xls:
          -- "max_error": the maximum floating-point error by
             DEMC.
          -- "input": the corresponding input that trigger
             the maximum error.
          -- "execute time": the execution time of detecting
             algorithm.
          -- "interval": the input interval includes the "input".
          -- "f1_n": the execution number of fitness1 function.
          -- "f2_n": the execution number of fitness2 function.
          -- "random seed": the random seed.
          -- "count" : repeat times of detecting method (i.e. 0..n)
          -- "gl_time": the execution time of differential
             evolution algorithm

  * experiments/experiment_results
    - repair_results1  --> includes the approximations of the
                           original mathematical functions
                           and patches
        -- line+X      --> includes the approximations of the
                           original mathematical functions.
                           We store the approximations in format of
                           python list which cannot be understand
                           in text.
        -- test+X      --> includes the patches.
        (Note: X is in {1,2,3} which respectively corresponds to
        three repair thresholds {high, middle, low} in our paper,)
        -- A patch includes two files:
             + patch_of_[function_name].c, e.g., patch_of_gsl_sf_airy_Ai.c,
               which saves the C code repesentation of the
               approximations of the original mathematical
               functions. The file is to implement the
               approximation to repair high floating-point
               error in the original GSL functions.
             + patch_of_[function_name], e.g., patch_of_gsl_sf_airy_Ai,
               which is the patch file generate by "diff"
               command. The file is to buid a new branch in
               the source code of GSL function to call the
               function in patch_of_[function_name].c .


    - table_results   --> includes the Excel tables storing
                          most experimental data
    - Experimental results are store in "table_results/experiment_results_total1.xls"
      In experiment_results_total1.xls:
          -- "program": the name of GSL functions.
          -- "Threshold": the repair threshold.
          -- "Bound": the repaired input interval
          -- "Bound_distance": the number of floating-point number
             in "Bound"
          -- "random_seed":random seed
          -- "PTB": the execution time of PTB algorithm
          -- "Repair": the execution time of Repair
          -- "Total": the total execution time
          -- "Patch size": the size of patch in Byte (e.g. 1000B)
          -- "Line number": the number of pieces of piecewise
             quaradic function that used to repair errors.
          -- Success rate: Testing results are also stored in the
	     table in column AF-AW, the two most important columns
	     are AJ and AT, AJ shows the success rate before repair,
             AT shows the success rate after repair. The success
             rate represents the proportion of the sample points
             that meet the repair threshold. After repair, the
             value in AT will equal to 1.0 for 19 of 20 GSL
             functions which means all the sample points meet
             the repair threshold after repairing for the 19 GSL
             functions.

2.1.2 Analyzing results:

Using the python script "plot_res.py" under the directory "AutoRNP"
, we can plot the results stored in the Excel tables. Most of
similar tables and figures in our paper will produced in the same
directory as "plot_res.py", shell command is below:

$ python plot_res.py -f "experiments/experiment_results/table_results/experiment_results_total1.xls"

The illustration of produced tables and figures are following:
    * "benchAndResults.xls":
        - Table 2 in our paper, shows the repair time and success
          rate of repair.
    * "Hig_max.eps", "Mid_max.eps", "low_max.eps"
      "Hig_avg.eps", "Hig_avg.eps", "low_avg.eps":
        - Fig. 12 in our paper, shows the accuracy improving for
          three level repair. Each row represents the improvement
          in accuracy achieved by AutoNRP on a single benchmark.
          The thick arrow starts at the accuracy of the program
          before repair, and ends at the accuracy of the program
          after repair. A \textbf{triangle} is drawn at the value
          of error threshold for each subject . A \textbf{pentagram}
          is drawn at the value of mean error of each subject in its
          whole input domain.
    * "th2time2bound.eps":
        - Fig. 13 in our paper, shows the log2 value of repair
          time and size of the repaired input interval for each
          subject under three repair threshold.
    * "timeOverheadb.eps":
        - Fig. 14(a) in our paper, shows the cumulative distribution
          of the slowdown for subjects after repaired over the repaired
          input interval.
    * "timeOverheadW.eps":
        - Fig. 14(b) in our paper, shows the cumulative distribution
          of the slowdown for subjects after repaired over the whole
          input domain.
    * "storage.xls":
        - Table. 4 in our paper, shows the storage overhead by the
          size of patch file.


2.1.3 Analyzing results in "paper_data":

Original experimental results  on AutoRNP in our paper are mainly
store in the excel table "original_data/experiment_results/table_results/experiment_results_total630.xls",
so run the command below, you can get the most of same tables and
figures in our paper

$ python plot_res.py -f "paper_data/experiment_results/table_results/experiment_results_total630.xls"

--------------------------------------------------------------------------
2.2 RUN HBG ON THE 20 FUNCTIONS

We have already collected the floating-point expressions that were
produced by Herbgrind when running on the 20 GSL functions. Files
store those expressions are named "High_level.fpcore", "Middle_level.fpcore"
and "Low_level.fpcore". We put those files in the directory "HBG/experiments".
In the directory "HBG", reviewers can run the following command to
use Herbie to improve those floating-point expressions:

$ ./HBG_herbie_test.sh

After a few hours (more than 10 hours), results for each file will
be produced in three directories: "graphsHigh", "graphsMiddle",
"graphsLow" in the directory "HBG/experiments", and reviewers
can open the file "report.html" in each directory to view the
results reported by Herbie.

Note: The original experimental results presented in our paper which
were conducted on our host machine are stored in the directory "HBG/paper_data".
The table "AutoRNP vs HBG.xls" in "HBG/paper_data" is the Table.3
in our paper.

Note: Due to the different random seed and the changes in latest
version of Herbie, the outputs of Herbie may not be exactly the
same as we present in our paper, while these slightly differeces
will not influence the experimental comparison, observation,
conclusion made in our paper.

Optional:
In the directory "HBG", Reviewers can run the following command to use
Herbgrind to produce floating-point expressions:

$ python test_HBG.py

After around 2 hours, three directories ("High_level_FPExp", "Middle_level_FPExp"
and "Low_level_FPExp") which store output of Herbgrind will be produced
in directory "HBG/driver_functions/exe/" and floating-point expressions
are stored in file named "*.gh".










